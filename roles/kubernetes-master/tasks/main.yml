---

- name: "Clean cert files"
  file: path=/opt/k8s/cert state=absent

- name: "Mkdir /opt/k8s"
  file:
   path: /opt/k8s/cert
   state: directory

- name: "Mkdir /etc/kubernetes"
  file:
    path: /etc/kubernetes
    state: directory

- name: "Mkdir /var/log/kubernetes"
  file:
    path: /var/log/kubernetes/
    state: directory

- name: "Install bin packages"
  unarchive: src={{ item }} dest=/usr/bin/
  with_items: "{{ lookup('pipe', 'find {{role_path}}/files/kubernetes/ -type f').split('\n') }}"

- name: upload bridge-utils package
  copy:
    src: bridge-utils-1.5-9.el7.x86_64.rpm
    dest: /opt/

- name: install kernel package
  yum: name=/opt/bridge-utils-1.5-9.el7.x86_64.rpm state=present

- name: "Create CA cert and key file"
  args:
   chdir: /opt/k8s/cert/
  shell: "openssl genrsa -out ca.key 2048 && openssl req -x509 -new -nodes -key ca.key -subj '/CN=gocd2.com' -days 5000 -out ca.crt"
  #delegate_to: "{{groups['k8s-master'][0]}}"
  become: yes
  when: "ansible_ssh_host == groups['k8s-master'][0]"

- name: "Sync CA files to every node"
  synchronize: src=/opt/k8s/cert/ dest=/opt/k8s/cert/
  delegate_to: "{{groups['k8s-master'][0]}}"
  become: yes
  when: "'k8s-node' in group_names"

- name: "Upload ssl config file"
  template: src=master_ssl.conf.j2 dest=/opt/k8s/master_ssl.conf
  become: yes
  when: "ansible_ssh_host == groups['k8s-master'][0]"

- name: "Create master cert and key file (for kube-apiserver)"
  shell: "openssl genrsa -out server.key 2048 && \
        openssl req -new -key server.key -subj '/CN={{groups['k8s-master'][0]}}' -config /opt/k8s/master_ssl.conf -out server.csr && \
        openssl x509 -req -in server.csr -CA ca.crt -CAkey ca.key -CAcreateserial -days 5000 -extensions v3_req -extfile /opt/k8s/master_ssl.conf -out server.crt"
  args:
   chdir: /opt/k8s/cert/
  become: yes
  when: "ansible_ssh_host == groups['k8s-master'][0]"

- name: "Create master cert and key file (for kube-controller-manager and kube-scheduler and kube-dns)"
  shell: "openssl genrsa -out cs_client.key 2048 && \
          openssl req -new -key cs_client.key -subj '/CN={{ansible_ssh_host}}' -out cs_client.csr && \
          openssl x509 -req -in cs_client.csr -CA ca.crt -CAkey ca.key -CAcreateserial -out cs_client.crt -days 10000"
  args:
    chdir: /opt/k8s/cert/
  become: yes
  when: "ansible_ssh_host == groups['k8s-master'][0]"

- name: "Upload kubeconfig-master to master node"
  copy:
    src: kubeconfig-master
    dest: /etc/kubernetes/kubeconfig-master
  when: "ansible_ssh_host == groups['k8s-master'][0]"


- name: "Create cert and key file (for kube-proxy and kubelet)"
  shell: "openssl genrsa -out kubelet_client.key 2048 && \
          openssl req -new -key kubelet_client.key -subj '/CN={{ansible_ssh_host}}' -out kubelet_client.csr && \
          openssl x509 -req -in kubelet_client.csr -CA ca.crt -CAkey ca.key  -CAcreateserial -out kubelet_client.crt -days 5000"
  args:
    chdir: /opt/k8s/cert/
  become: yes
  when: "'k8s-node' in group_names"


- name: "Upload kubeconfig-kubelet to every worker node"
  copy:
    src: kubeconfig-kubelet
    dest: /etc/kubernetes/kubeconfig-kubelet
  become: yes
  when: "'k8s-node' in group_names"

- name: "Make sure /etc/kubernetes/manifests"
  file: path=/etc/kubernetes/manifests state=directory

- name: "Install kubelet service"
  template: src=kubelet.master.service.j2 dest=/etc/systemd/system/kubelet.service
  become: yes
  when: "'k8s-master' in group_names"

- name: "Start kubelet service"
  systemd:
    name: kubelet
    state: restarted
    #enabled: yes
    daemon_reload: yes
  when: "'k8s-master' in group_names"


- name: "Run kube-apiserver static pod"
  template: src=kube-apiserver.yml.j2 dest=/etc/kubernetes/manifests/kube-apiserver.yml
  when: "'k8s-master' in group_names"

- name: "Run kube-controller-manager static pod"
  template: src=kube-controller-manager.yml.j2 dest=/etc/kubernetes/manifests/kube-controller-manager.yml
  when: "'k8s-master' in group_names"

- name: "Run kube-scheduler static pod"
  template: src=kube-scheduler.yml.j2 dest=/etc/kubernetes/manifests/kube-scheduler.yml
  when: "'k8s-master' in group_names"

- name: "Run kube-dns static pod"
  template: src=kube-dns.yml.j2 dest=/etc/kubernetes/manifests/kube-dns.yml
  when: "'k8s-master' in group_names"

- name: "Install kubelet service"
  template: src=kubelet.service.j2 dest=/etc/systemd/system/kubelet.service
  become: yes
  when: "'k8s-node' in group_names"

- name: "Start kubelet service"
  systemd:
    name: kubelet
    state: restarted
    #enabled: yes
    daemon_reload: yes
  when: "'k8s-node' in group_names"

- name: "Run kube-proxy static pod"
  template: src=kube-proxy.yml.j2 dest=/etc/kubernetes/manifests/kube-proxy.yml
  when: "'k8s-node' in group_names"

- name: "Set subnet"
  shell: "/usr/bin/etcdctl -C http://{{ groups['etcd-servers'][0] }}:4001 set /coreos.com/network/config '{\"Network\":\"192.168.0.0/16\",\"SubnetLen\":27}'"
  when: "ansible_ssh_host == groups['k8s-master'][0]"


- name: "Remove old flannel subnet.env"
  file: path=/var/run/flannel/subnet.env state=absent

- name: "Run flannel static pod"
  template: src=flannel.yml.j2 dest=/etc/kubernetes/manifests/flannel.yml
  when: "'k8s-node' in group_names"

- name: "Wait for flanneld daemon"
  wait_for: path=/var/run/flannel/subnet.env state=present
  when: "'k8s-node' in group_names"

- name: "Set flanneld subnet"
  shell: "iptables -t nat -F && ifconfig docker0 down &&  brctl delbr docker0"
  ignore_errors: true
  when: "'k8s-node' in group_names"

#
- name: "Reinstall docker service"
  template: src=docker.service.j2 dest=/etc/systemd/system/docker.service
  become: yes
  when: "'k8s-node' in group_names"

- name: "Restart docker daemon"
  systemd:
    name: docker
    state: restarted
    enabled: yes
    daemon_reload: yes
  when: "'k8s-node' in group_names"
