---

- name: "Clean cert files"
  file: path=/opt/k8s/cert state=absent

- name: "Mkdir /opt/k8s"
  file:
   path: /opt/k8s/cert
   state: directory

- name: "Mkdir /etc/kubernetes"
  file:
    path: /etc/kubernetes
    state: directory

- name: "Mkdir /var/log/kubernetes"
  file:
    path: /var/log/kubernetes/
    state: directory

- name: "remove docker_gwbridge"
  shell: "docker network rm docker_gwbridge"
  ignore_errors: true
- name: "Stop etcd container"
  shell: "docker rm -f $(docker ps |grep etcd|awk '{print $1}')"
  when: "'etcd-servers' in group_names"

- name: "Clean cluster data"
  file: path=/data state=absent
  when: "'etcd-servers' in group_names"


- name: etcd data
  file: path=/data state=directory
  when: "'etcd-servers' in group_names"

- name: create etcd cluster
  shell: " docker run -d --restart always -v /data:/data -p 4001:4001 -p 2379:2379 etcd:1.1 --data-dir /data --listen-client-urls http://0.0.0.0:2379,http://0.0.0.0:4001 --advertise-client-urls http://0.0.0.0:2379"
  when: "'etcd-servers' in group_names"

- name: "Install bin packages"
  unarchive: src={{ item }} dest=/usr/bin/
  with_items: "{{ lookup('pipe', 'find {{role_path}}/files/kubernetes/ -type f').split('\n') }}"

- name: "Create CA cert and key file"
  args:
   chdir: /opt/k8s/cert/
  shell: "openssl genrsa -out ca.key 2048 && openssl req -x509 -new -nodes -key ca.key -subj '/CN=wemeeting.hauwei.com' -days 5000 -out ca.crt"
  delegate_to: "{{groups['k8s-master'][0]}}"
  when: "ansible_ssh_host == groups['k8s-master'][0]"

- name: "Sync CA files to every node"
  synchronize: src=/opt/k8s/cert/ dest=/opt/k8s/cert/
  delegate_to: "{{groups['k8s-master'][0]}}"
  when: "'k8s-workers' in group_names"

- name: "Upload ssl config file"
  template: src=master_ssl.conf.j2 dest=/opt/k8s/master_ssl.conf
  become: yes
  when: "ansible_ssh_host == groups['k8s-master'][0]"

- name: "Create master cert and key file (for kube-apiserver)"
  shell: "openssl genrsa -out server.key 2048 && \
        openssl req -new -key server.key -subj '/CN={{groups['k8s-master'][0]}}' -config /opt/k8s/master_ssl.conf -out server.csr && \
        openssl x509 -req -in server.csr -CA ca.crt -CAkey ca.key -CAcreateserial -days 5000 -extensions v3_req -extfile /opt/k8s/master_ssl.conf -out server.crt"
  args:
   chdir: /opt/k8s/cert/
  when: "ansible_ssh_host == groups['k8s-master'][0]"

- name: "Create master cert and key file (for kube-controller-manager and kube-scheduler and kube-dns)"
  shell: "openssl genrsa -out cs_client.key 2048 && \
          openssl req -new -key cs_client.key -subj '/CN={{ansible_ssh_host}}' -out cs_client.csr && \
          openssl x509 -req -in cs_client.csr -CA ca.crt -CAkey ca.key -CAcreateserial -out cs_client.crt -days 10000"
  args:
    chdir: /opt/k8s/cert/
  when: "ansible_ssh_host == groups['k8s-master'][0]"

- name: "Upload kubeconfig-master to master node"
  copy:
    src: kubeconfig-master
    dest: /etc/kubernetes/kubeconfig-master
  when: "ansible_ssh_host == groups['k8s-master'][0]"

- name: "Upload kubeconfig-kubelet to every worker node"
  copy:
    src: kubeconfig-kubelet
    dest: /etc/kubernetes/kubeconfig-kubelet
  when: "'k8s-workers' in group_names"


- name: "Create cert and key file (for kube-proxy and kubelet)"
  shell: "openssl genrsa -out kubelet_client.key 2048 && \
          openssl req -new -key kubelet_client.key -subj '/CN={{ansible_ssh_host}}' -out kubelet_client.csr && \
          openssl x509 -req -in kubelet_client.csr -CA ca.crt -CAkey ca.key  -CAcreateserial -out kubelet_client.crt -days 5000"
  args:
    chdir: /opt/k8s/cert/
  when: "'k8s-workers' in group_names"

- name: "Upload kubeconfig-kubelet to every worker node"
  copy:
    src: kubeconfig-kubelet
    dest: /etc/kubernetes/kubeconfig-kubelet
  when: "'k8s-workers' in group_names"


- name: "Set subnet"
  shell: "/usr/bin/etcdctl -C http://{{ groups['etcd-servers'][0] }}:4001 set /coreos.com/network/config '{\"Network\":\"192.168.0.0/16\"}'"
  when: "ansible_ssh_host == groups['k8s-master'][0]"

- name: "Install flanneld service"
  template: src=flanneld.service.j2 dest=/etc/systemd/system/flanneld.service
  become: yes

- name: "Start flanneld service"
  systemd:
   name: flanneld
   state: restarted
   enabled: yes
   daemon_reload: yes


- name: "Set flanneld subnet"
  shell: "iptables -t nat -F && ifconfig docker0 down &&  brctl delbr docker0"

- name: "Reinstall docker service"
  template: src=docker.service.j2 dest=/etc/systemd/system/docker.service
  become: yes

- name: "Restart docker daemon"
  systemd:
    name: docker
    state: restarted
    enabled: yes
    daemon_reload: yes

- name: "Upload pause image"
  copy:
    src: pause.tar
    dest: /opt/k8s/pause.tar

- name: "Load pause image"
  shell: "docker load -i /opt/k8s/pause.tar"



- name: "Run kube-apiserver container"
  shell: "docker run -d --restart always --net=host -v /opt/k8s/cert/:/opt/k8s/cert/ kube-apiserver:1.0 \
        --admission-control=NamespaceLifecycle,NamespaceAutoProvision,LimitRanger,SecurityContextDeny,ResourceQuota \
        --runtime-config=api/v1 --allow-privileged=true --insecure-bind-address={{ groups['k8s-master'][0] }} \
        --insecure-port=8080 --kubelet-https=true --secure-port=6443 --bind-address={{ groups['k8s-master'][0] }} \
        --client-ca-file=/opt/k8s/cert/ca.crt --tls-private-key-file=/opt/k8s/cert/server.key \
        --tls-cert-file=/opt/k8s/cert/server.crt --service-cluster-ip-range=10.200.0.0/16 \
        --etcd-servers=http://{{ groups['etcd-servers'][0] }}:4001 --logtostderr=true --cors-allowed-origins='.*'"

  when: "ansible_ssh_host == groups['k8s-master'][0]"


- name: "Run kube-scheduler container"
  shell: "docker run -d --restart always --net=host -v /etc/kubernetes:/etc/kubernetes kube-scheduler:1.0 \
      --master=https://{{ groups['k8s-master'][0] }}:6443 --kubeconfig=/etc/kubernetes/kubeconfig-master"

  when: "ansible_ssh_host == groups['k8s-master'][0]"


- name: "Run kube-controller-manager container"
  shell: "docker run -d --restart always --net=host -v /etc/kubernetes:/etc/kubernetes -v /opt/k8s:/opt/k8s kube-controller-manager:1.0 \
        --master={{ groups['k8s-master'][0] }}:8080 --master=https://{{ groups['k8s-master'][0] }}:6443 \
        --service_account_private_key_file=/opt/k8s/server.key
        --root-ca-file=/opt/k8s/cert/ca.crt --kubeconfig=/etc/kubernetes/kubeconfig-master \
        --logtostderr=true"
  when: "ansible_ssh_host == groups['k8s-master'][0]"

- name: "Run kube-dns container"
  shell: "docker run -d --restart always --net=host -v /opt/k8s/:/opt/k8s/ -v /etc/kubernetes:/etc/kubernetes kube-dns:1.0 \
  --dns-port=53 --domain=cluster.local \
  --kube-master-url=https://{{ groups['k8s-master'][0] }}:6443 \
  --kubecfg-file=/etc/kubernetes/kubeconfig-master"
  when: "ansible_ssh_host == groups['k8s-master'][0]"

- name: "Run kube-proxy container"
  shell: "docker run --privileged -d --restart always --net=host -v /etc/kubernetes:/etc/kubernetes -v /opt/k8s:/opt/k8s  kube-proxy:1.0 \
  --master=https://{{ groups['k8s-master'][0] }}:6443 --proxy-mode=iptables \
  --logtostderr=true --kubeconfig=/etc/kubernetes/kubeconfig-kubelet"
  when: "'k8s-node' in group_names"
